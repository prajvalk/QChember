# This workflow builds your project on various compilers and BLAS backends.
name: NewSCF Build Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Release: Ubuntu GCC + OpenBLAS + native + OpenMP
          - name: ubuntu-gcc-openblas-native-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            blas: openblas
            openmp: ON
            march: native

          # Release: Ubuntu GCC + OpenBLAS + no avx/sse + OpenMP
          - name: ubuntu-gcc-openblas-noavx-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            blas: openblas
            openmp: ON
            march: ""

          # Release: Ubuntu GCC + OpenBLAS + no avx/sse + no OpenMP
          - name: ubuntu-gcc-openblas-noavx-noopenmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            blas: openblas
            openmp: OFF
            march: ""

          # Release: Ubuntu Clang + OpenBLAS + native + OpenMP
          - name: ubuntu-clang-openblas-native-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
            blas: openblas
            openmp: ON
            march: native

          # Release: Ubuntu GCC + MKL + AVX/SSE + OpenMP
          - name: ubuntu-gcc-mkl-avx-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            blas: mkl
            openmp: ON
            march: ""

          # Release: Ubuntu AOCC + BLIS + AVX/SSE + OpenMP (simulated)
          - name: ubuntu-aocc-blis-avx-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
            blas: blis
            openmp: ON
            march: ""

          # Release: Arch GCC + OpenBLAS + native + OpenMP (simulated)
          - name: arch-gcc-openblas-native-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            blas: openblas
            openmp: ON
            march: native

          # Release: Arch ICPX + MKL + native + OpenMP (simulated)
          - name: arch-icpx-mkl-native-openmp
            os: ubuntu-latest
            build_type: Release
            c_compiler: icx
            cpp_compiler: icpx
            blas: mkl
            openmp: ON
            march: native

          # Debug: Ubuntu GCC + OpenBLAS + no AVX/SSE + OpenMP
          - name: debug-ubuntu-gcc-openblas-noavx-openmp
            os: ubuntu-latest
            build_type: Debug
            c_compiler: gcc
            cpp_compiler: g++
            blas: openblas
            openmp: ON
            march: ""

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake libopenblas-dev liblapack-dev

        if [ "${{ matrix.blas }}" = "mkl" ]; then
          wget -qO mkl.sh https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17415/l_onemkl_p_2023.2.0.49541_offline.sh
          chmod +x mkl.sh
          sudo ./mkl.sh -a -s --eula accept
          echo "source /opt/intel/oneapi/setvars.sh" >> $GITHUB_ENV
        elif [ "${{ matrix.blas }}" = "blis" ]; then
          sudo apt-get install -y libblis-dev libflame-dev
        fi

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUSE_OPENMP=${{ matrix.openmp }}
        -DMARCH_FLAG=${{ matrix.march }}
        -DBLAS_VENDOR=${{ matrix.blas }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
