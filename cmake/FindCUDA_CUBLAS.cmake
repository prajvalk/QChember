# Helper to detect CUDA and CUBLAS libraries and provide HAS_CUDA / HAS_CUBLAS

function(detect_cuda_and_cublas)
  set(HAS_CUDA FALSE PARENT_SCOPE)
  set(HAS_CUBLAS FALSE PARENT_SCOPE)

  # Try modern CMake CUDA package first
  message(STATUS "Detecting CUDA...")
  if(NOT TARGET CUDAToolkit::cudart)
    find_package(CUDAToolkit QUIET)
  endif()

  if(TARGET CUDAToolkit::cudart)
    set(HAS_CUDA TRUE PARENT_SCOPE)
    set(CUDA_TOOLKIT_FOUND TRUE)
    message(STATUS "CUDAToolkit found (CMake package).")
    # Expose include dirs and libs
    set(CUDA_INCLUDE_DIRS "${CUDAToolkit_INCLUDE_DIRS}" PARENT_SCOPE)
    set(CUDA_LIBRARIES "${CUDAToolkit_LIBRARIES}" PARENT_SCOPE)
  else()
    # Fallback: legacy FindCUDA
    find_package(CUDA QUIET)
    if(CUDA_FOUND)
      set(HAS_CUDA TRUE PARENT_SCOPE)
      set(CUDA_INCLUDE_DIRS "${CUDA_INCLUDE_DIRS}" PARENT_SCOPE)
      set(CUDA_LIBRARIES "${CUDA_LIBRARIES}" PARENT_SCOPE)
      message(STATUS "CUDA found via legacy FindCUDA module.")
    else()
      message(STATUS "CUDA not found")
    endif()
  endif()

  # Detect cuBLAS: try to find the library name 'cublas'
  if(HAS_CUDA)
    find_library(CUBLAS_LIB cublas PATHS ${CUDA_TOOLKIT_ROOT_DIR}/lib64 ${CUDA_TOOLKIT_ROOT_DIR}/lib NO_DEFAULT_PATH)
    if(NOT CUBLAS_LIB)
      find_library(CUBLAS_LIB cublas PATHS ${CUDA_TOOLKIT_ROOT_DIR}/lib ${CUDA_TOOLKIT_ROOT_DIR}/lib64)
    endif()

    if(CUBLAS_LIB)
      set(HAS_CUBLAS TRUE PARENT_SCOPE)
      set(CUBLAS_LIBRARIES ${CUBLAS_LIB} PARENT_SCOPE)
      message(STATUS "cublas library found: ${CUBLAS_LIB}")
    else()
      # Try pkg-config or system
      find_library(CUBLAS_LIB cublas)
      if(CUBLAS_LIB)
        set(HAS_CUBLAS TRUE PARENT_SCOPE)
        set(CUBLAS_LIBRARIES ${CUBLAS_LIB} PARENT_SCOPE)
        message(STATUS "cublas library found (system): ${CUBLAS_LIB}")
      else()
        message(STATUS "cublas not found")
      endif()
    endif()
  else()
    # Even without CUDA we may try to find cublas (rare)
    find_library(CUBLAS_LIB cublas)
    if(CUBLAS_LIB)
      set(HAS_CUBLAS TRUE PARENT_SCOPE)
      set(CUBLAS_LIBRARIES ${CUBLAS_LIB} PARENT_SCOPE)
      message(STATUS "cublas library found: ${CUBLAS_LIB}")
    endif()
  endif()

  # Export flags to top-level (as cache variables)
  if(HAS_CUDA)
    set(HAS_CUDA 1 CACHE INTERNAL "Detected CUDA")
  else()
    set(HAS_CUDA 0 CACHE INTERNAL "Detected CUDA")
  endif()

  if(HAS_CUBLAS)
    set(HAS_CUBLAS 1 CACHE INTERNAL "Detected cuBLAS")
  else()
    set(HAS_CUBLAS 0 CACHE INTERNAL "Detected cuBLAS")
  endif()
endfunction()