script_version = "0.2.0"
project_version = ""

default_flags="-fpermissive"
debug_flags=" -g3" # Modify Later
release_flags=" -O3"
cxx_lib_flags=" -fPIC -shared"
include_flags=""

AVX2_FLAG=" -mavx2"
AVX512_FLAGS=" -mavx512f -mavx512cd -mavx512dq -mavx512bw -mavx512vl"

with open("VERSION", "r") as file:
    project_version = file.readline()

compile_script=f"#!/bin/bash \n # Generated by pybb {script_version} \n"
check_script=f"#!/bin/bash \n # Generated by pybb {script_version} \n"
tests_script=f"#!/bin/bash \n # Generated by pybb {script_version} \n"

def get_index(options, cmp):
    i = 0
    for opt in options:
        if opt == cmp:
            return i
        else:
            i=i+1
    return -1

def get_user_input(prompt, options, default_index):
    while True:
        inp = input(prompt+" "+str(options)+" ["+options[default_index]+"]: ")
        if inp == "" or inp == None:
            return default_index
        if inp in options:
            return get_index(options, inp)
        else:
            print("Available choices:", options)

def get_compiler_flags(compiler, buildtype, simd_level, openmp):
    flags=default_flags
    if buildtype == "release":
        flags += release_flags
        if compiler == "g++" or compiler == "clang++":
            flags += " -flto"
        else:
            flags += " -ipo"
    else:
        flags += debug_flags
        if compiler == "g++" or compiler == "clang++":
            flags += " -Og"
        else:
            flags += " -O0"
    if simd_level == "native":
        if compiler == "g++" or compiler == "clang++":
            flags += " -march=native"
        else:
            flags += " -xHost"
    elif simd_level == "avx2":
        flags += AVX2_FLAG
    elif simd_level == "avx512":
        flags += AVX512_FLAGS
    else:
        if compiler == "g++":
            flags += " -mno-sse -mno-avx -fno-tree-vectorize"
        elif compiler == "clang++":
            flags += " -mno-sse -mno-avx -fno-vectorize -fno-slp-vectorize"
        else:
            flags += " -no-vec -mno-sse -mno-avx"
    if openmp == "openmp":
        flags += " -fopenmp"
    else: 
        flags += "-fno-openmp"
    return flags

def get_blas_link(blas_type):
    if blas_type == "none":
        return ""
    elif blas_type == "netlib":
        return "-lblas"
    elif blas_type == "openblas":
        return "-lopenblas"
    elif blas_type == "flexiblas":
        return "-lflexiblas"
    elif blas_type == "intel_mkl":
        return "-I${MKLROOT}/include -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group"
    elif blas_type == "amd_blis":
        return "-lblis"
    else:
        return ""
    
build_flags=["release", "debug"]
simd_flags=["native", "avx2", "avx512", "none"]
openmp_flags=["yes", "no"]
compilers=["g++", "clang++", "icpx"]
blas_type=["none", "netlib", "openblas", "flexiblas", "intel_mkl", "amd_blis"]

print("new_scf Python Build Bootstrapping System (pybb)")
print("Version", script_version)
print("Mozilla Public License 2.0, see LICENSE.md for the full license terms.")
print("Copyright (C) 2025, Prajval K")
print()

user_build=get_user_input("Build Type:", build_flags, 0)
user_simd=get_user_input("CPU Intrinsics Level:", simd_flags, 0)
user_openmp=get_user_input("Use OpenMP for parallelization?", openmp_flags, 0)
user_compiler=get_user_input("C++ Compiler:", compilers, 0)
user_blas=get_user_input("BLAS Type:", blas_type, 0)

user_build=build_flags[user_build]
user_simd=simd_flags[user_simd]
if openmp_flags[user_openmp] == "yes":
    user_openmp="openmp"
else:
    user_openmp="serial"
user_compiler=compilers[user_compiler]
user_blas=blas_type[user_blas]

config_tag=f"newscf-{project_version}-{user_build}-{user_simd}-{user_openmp}-{user_blas}"

print()
print("Build Tag:", config_tag)

CXX=user_compiler
CXX_FLAGS=get_compiler_flags(CXX, user_build, user_simd, user_openmp)

import os
import shutil

PROJECT_ROOT=os.getcwd()
BUILD_DIR=PROJECT_ROOT+"/build/"+config_tag+"/"

if os.path.exists(BUILD_DIR):
    shutil.rmtree(BUILD_DIR)

LIB_DIR=BUILD_DIR+"lib"
TEST_DIR=BUILD_DIR+"tests"

os.makedirs(BUILD_DIR)
os.mkdir(LIB_DIR)
os.mkdir(TEST_DIR)

include_flags += "" + PROJECT_ROOT +"/common/include"
compile_script += f"CXX={CXX} \n"
compile_script += f"CXX_FLAGS=\"{CXX_FLAGS}\" \n"
compile_script += f"CXX_LIB_FLAGS=\"{cxx_lib_flags}\" \n"
compile_script += f"INCLUDE_FLAGS=\"-I{PROJECT_ROOT}/common/include\" \n"

compile_script += "\n"
compile_script += "set -e \n"
compile_script += "echo Compiling libblasbind... \n \n"

blas_link=get_blas_link(blas_type)
compile_script += f"BLASBIND_SRC=\"{PROJECT_ROOT}/blasbind/src/*.cpp\"\n"
compile_script += f"BLASBIND_INCLUDE=\"-I{PROJECT_ROOT}/blasbind/include\"\n"
compile_script += f"BLASBIND_OBJ=\"-o {LIB_DIR}/libblasbind.so\"\n"
compile_script += f"BLASBIND_LINK_LIB=\"{blas_link}\"\n"
compile_script += "$CXX $CXX_FLAGS $CXX_LIB_FLAGS $INCLUDE_FLAGS $BLASBIND_INCLUDE $BLASBIND_SRC $BLASBIND_OBJ $BLASBIND_LINK_LIB 2>&1 | tee -a build.log \n"

compile_script += "\n"
compile_script += "echo Compiling libblasbind tests... \n"
compile_script += f"$CXX $CXX_FLAGS $INCLUDE_FLAGS $BLASBIND_INCLUDE {PROJECT_ROOT}/blasbind/tests/gemm_test.cpp -o {TEST_DIR}/gemm_test -L{LIB_DIR} -lblasbind 2>&1 | tee -a build.log \n"

tests_script += f"export LD_LIBRARY_PATH={LIB_DIR}:$LD_LIBRARY_PATH \n"
tests_script += "echo Running libblasbind tests ... \n"
tests_script += f"{TEST_DIR}/gemm_test 2>&1 | tee -a tests.log \n"

compile_script += "\n"
compile_script += "echo Compiling libmatrix ... \n \n"
compile_script += f"LIBMATRIX_SRC=\"{PROJECT_ROOT}/libmatrix/src/*.cpp\"\n"
compile_script += f"LIBMATRIX_INCLUDE=\"$BLASBIND_INCLUDE -I{PROJECT_ROOT}/libmatrix/include\"\n"
compile_script += f"LIBMATRIX_OBJ=\"-o {LIB_DIR}/libmatrix.so\""

compile_script += "\n"
compile_script += "$CXX $CXX_FLAGS $CXX_LIB_FLAGS $INCLUDE_FLAGS $LIBMATRIX_INCLUDE $LIBMATRIX_SRC $LIBMATRIX_OBJ 2>&1 | tee -a build.log \n"

compile_script += "\n"
compile_script += "echo Compiling libmatrix tests ... \n"
compile_script += f"$CXX $CXX_FLAGS $INCLUDE_FLAGS $LIBMATRIX_INCLUDE {PROJECT_ROOT}/libmatrix/tests/matrix_test.cpp -o {TEST_DIR}/matrix_test -L{LIB_DIR} -lmatrix 2>&1 | tee -a build.log \n"

tests_script += "echo Running libmatrix tests \n"
tests_script += f"{TEST_DIR}/matrix_test 2>&1 | tee -a tests.log \n"

compile_script += "\n"
compile_script += "echo Compiling libqcex ... \n"
compile_script += f"LIBQCEX_INCLUDE=\"-I{PROJECT_ROOT}/libqcex/include $LIBMATRIX_INCLUDE\"\n"
compile_script += f"LIBQCEX_SRC=\"{PROJECT_ROOT}/libqcex/src/*.cpp\"\n"
compile_script += f"LIBQCEX_OBJ=\"-o {LIB_DIR}/libqcex.so\"\n"

compile_script += f"$CXX $CXX_FLAGS $CXX_LIB_FLAGS $INCLUDE_FLAGS $LIBQCEX_INCLUDE $LIBQCEX_OBJ $LIBQCEX_SRC 2>&1 | tee -a build.log\n"

compile_script += "echo Compiling libqcex tests ... \n"
compile_script += f"$CXX $CXX_FLAGS $INCLUDE_FLAGS $LIBQCEX_INCLUDE {PROJECT_ROOT}/libqcex/tests/geometry_test.cpp -o {TEST_DIR}/qcex_geom_test -L{LIB_DIR} -lqcex 2>&1 | tee -a build.log \n"

tests_script += "echo Running libqcex tests \n"
tests_script += f"{TEST_DIR}/qcex_geom_test 2>&1 | tee -a tests.log \n"

# Finally

with open(BUILD_DIR+"checkhost.sh", "w+") as chk:
    chk.write(check_script)

with open(BUILD_DIR+"build.sh", "w+") as build:
    build.write(compile_script)

with open(BUILD_DIR+"run_tests.sh", "w+") as tests:
    tests.write(tests_script)